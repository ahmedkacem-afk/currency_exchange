/**
 * Cash Custody API
 * 
 * This module handles all database operations related to cash custody management
 */

import supabase, { handleApiError, sanitizeJsonData } from '../client'
import { generateUUID } from '../../uuid'
import { getWalletById, updateWalletCurrencyBalance } from './wallets'
import { createNotification } from './notifications'

/**
 * Helper function to fetch user details for cash custody records
 * @param {Array} records - Array of cash custody records
 * @returns {Promise<Array>} - Records with related data
 */
async function fetchUserDetails(records) {
  if (!records || records.length === 0) return [];
  
  // Create arrays of unique user IDs
  const treasurerIds = [...new Set(records.map(r => r.treasurer_id).filter(Boolean))];
  const cashierIds = [...new Set(records.map(r => r.cashier_id).filter(Boolean))];
  const allUserIds = [...new Set([...treasurerIds, ...cashierIds])];
  
  // Get all wallet IDs
  const walletIds = [...new Set(records.map(r => r.wallet_id).filter(Boolean))];
  
  // Early exit if no IDs to fetch
  if (allUserIds.length === 0) return records;
  
  console.log('Cash Custody API: Fetching user details for', allUserIds.length, 'users');
  
  try {
    // Fetch user details
    // Try from auth.users first
    let userProfiles = [];
    
    try {
      const { data: fetchedUsers, error } = await supabase
        .from('auth.users')
        .select('id, email')
        .in('id', allUserIds);
        
      if (!error && fetchedUsers) {
        userProfiles = fetchedUsers;
      }
    } catch (authError) {
      console.log('Error accessing auth.users table:', authError);
      
      // Fallback to simpler approach - just use basic user data with IDs
      userProfiles = allUserIds.map(id => ({
        id,
        email: `user-${id.substring(0, 6)}`,
        name: `User ${id.substring(0, 6)}`
      }));
    }
    
    // Fetch wallet data
    const { data: wallets, error: walletError } = await supabase
      .from('wallets')
      .select('*')
      .in('id', walletIds);
      
    if (walletError) {
      console.error('Error fetching wallets:', walletError);
      // Continue without wallet data
    }
    
    // Create lookup maps
    const userMap = Object.fromEntries((userProfiles || []).map(user => [user.id, user]));
    const walletMap = Object.fromEntries((wallets || []).map(wallet => [wallet.id, wallet]));
    
    // Add user details to records
    return records.map(record => ({
      ...record,
      treasurer: userMap[record.treasurer_id] || { id: record.treasurer_id, name: `Treasurer ${record.treasurer_id.substring(0, 6)}` },
      cashier: userMap[record.cashier_id] || { id: record.cashier_id, name: `Cashier ${record.cashier_id.substring(0, 6)}` },
      wallet: walletMap[record.wallet_id] || { id: record.wallet_id, name: `Wallet ${record.wallet_id.substring(0, 6)}` }
    }));
  } catch (error) {
    console.error('Error in fetchUserDetails:', error);
    return records; // Return original records on error
  }
}

/**
 * Update the status of a cash custody record
 * 
 * @param {string} custodyId - The ID of the custody record to update
 * @param {string} status - The new status ('pending', 'approved', 'rejected', 'returned')
 * @returns {Promise<Object>} - The updated custody record
 */
export async function updateCustodyStatus(custodyId, status) {
  try {
    console.log(`Cash Custody API: Updating custody status to ${status} for ID ${custodyId}`);
    
    if (!custodyId) throw new Error('Custody ID is required');
    if (!['pending', 'approved', 'rejected', 'returned'].includes(status)) {
      throw new Error('Invalid status. Must be one of: pending, approved, rejected, returned');
    }
    
    // Get current user from session
    const { data: sessionData } = await supabase.auth.getSession();
    const user = sessionData?.session?.user;
    
    if (!user || !user.id) {
      console.error('Cash Custody API: No authenticated user found');
      throw new Error('User not authenticated');
    }
    
    // Get the custody record first to check permissions
    const { data: custodyRecord, error: getError } = await supabase
      .from('cash_custody')
      .select('*')
      .eq('id', custodyId)
      .single();
      
    if (getError) throw getError;
    if (!custodyRecord) throw new Error('Custody record not found');
    
    // Check if user has permission (must be either treasurer or cashier)
    const isInvolved = user.id === custodyRecord.treasurer_id || user.id === custodyRecord.cashier_id;
    if (!isInvolved) throw new Error('You do not have permission to update this custody record');
    
    // Update the custody record
    const { data, error } = await supabase
      .from('cash_custody')
      .update({ status, updated_at: new Date().toISOString() })
      .eq('id', custodyId)
      .select('*')
      .single();
      
    if (error) throw error;
    
    // Create notification for the other party
    const recipientId = user.id === custodyRecord.treasurer_id 
      ? custodyRecord.cashier_id 
      : custodyRecord.treasurer_id;
      
    const notificationType = `custody_${status}`;
    const notificationTitle = `Cash custody ${status}`;
    const notificationMessage = `A cash custody request has been ${status}`;
    
    try {
      await createNotification({
        userId: recipientId,
        title: notificationTitle,
        message: notificationMessage,
        type: notificationType,
        referenceId: custodyId,
        requiresAction: false,
        actionPayload: {
          custodyId,
          status,
          updatedBy: user.id,
          timestamp: new Date().toISOString()
        }
      });
    } catch (notificationError) {
      console.error('Error creating notification:', notificationError);
      // Continue even if notification fails
    }
    
    return data;
  } catch (error) {
    console.error('Cash Custody API: Error in updateCustodyStatus:', error);
    throw handleApiError(error, 'Update Custody Status');
  }
}

/**
 * Get all cash custody records for the current user
 * 
 * @returns {Promise<Object>} - Object containing given and received custody records
 */
export async function getAllCashCustody() {
  try {
    console.log('Cash Custody API: Fetching all custody records...');
    
    // Get user ID from session - handle potential errors more gracefully
    const { data: sessionData } = await supabase.auth.getSession();
    const user = sessionData?.session?.user;
    
    if (!user || !user.id) {
      console.error('Cash Custody API: No authenticated user found in getAllCashCustody');
      throw new Error('User not authenticated');
    }
    
    console.log('Cash Custody API: Fetching custody records for user ID:', user.id);
    
    // Get both types of custody records in parallel
    const [givenResponse, receivedResponse] = await Promise.all([
      // Custody given to cashiers (user is the treasurer)
      supabase
        .from('cash_custody')
        .select('*')
        .eq('treasurer_id', user.id)
        .order('created_at', { ascending: false }),
      
      // Custody received from treasurer (user is the cashier)
      supabase
        .from('cash_custody')
        .select('*')
        .eq('cashier_id', user.id)
        .order('created_at', { ascending: false })
    ]);
    
    // Check for errors
    if (givenResponse.error) throw givenResponse.error;
    if (receivedResponse.error) throw receivedResponse.error;
    
    // Fetch related user details and add them to the records
    const [enhancedGivenRecords, enhancedReceivedRecords] = await Promise.all([
      fetchUserDetails(givenResponse.data || []),
      fetchUserDetails(receivedResponse.data || [])
    ]);
    
    return {
      given: enhancedGivenRecords || [],
      received: enhancedReceivedRecords || []
    };
  } catch (error) {
    console.error('Cash Custody API: Error in getAllCashCustody:', error);
    throw handleApiError(error, 'Get All Cash Custody');
  }
}

// Rest of your file continues below...